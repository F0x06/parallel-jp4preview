#!/bin/bash
# rawdata-procedures - Camera raw data procedures
#
# Copyright (c) 2013-2015 FOXEL SA - http://foxel.ch
# Please read <http://foxel.ch/license> for more information.
#
#
# Author(s):
#
#       Kevin Velickovic <k.velickovic@foxel.ch>
#
#
# This file is part of the FOXEL project <http://foxel.ch>.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#
# Additional Terms:
#
#       You are required to preserve legal notices and author attributions in
#       that material or in the Appropriate Legal Notices displayed by works
#       containing it.
#
#       You are required to attribute the work as explained in the "Usage and
#       Attribution" section of <http://foxel.ch/license>.

# Script parameters #
PARAM_MOUNT="/data/"
PARAM_MAC=""
PARAM_MASTER=""
PARAM_SEGMENT=""
PARAM_DISK_THREADS=""
PARAM_NO_DEBAYER="0"

# Help function #
_help() {
    echo """
    Usage: $(basename $0) [OPTIONS]

    [Required arguments]
    --mount-point       Base mount directory
    --mac-address       Camera MAC address
    --master-timestamp  Master timestamp

    [Optional arguments]
    --segment-timestamp Segment timestamp
    --no-split          Exit program
    --no-debayer        Write grayscale images (without debayer)
    --disk-threads      Process localy with specified number of threads
    --help              Show this message
    """
}

# Arguments and parameters parser #
arguments() {

    # Search in arguments #
    while [[ $# > 0 ]]; do

        args="$1"
        shift
        case $args in
            --no-debayer)
                PARAM_NO_DEBAYER="1"
            ;;
            --no-split)
                echo "--no-split given exiting..."
                exit
            ;;
            --mount-point)
                PARAM_MOUNT="$1"
                shift
            ;;
            --mac-address)
                PARAM_MAC="$1"
                shift
            ;;
            --master-timestamp)
                PARAM_MASTER="$1"
                shift
            ;;
            --segment-timestamp)
                PARAM_SEGMENT="$1"
                shift
            ;;
            --disk-threads)
                if [ -z "$1" ]; then
                    PARAM_DISK_THREADS="+0"
                else
                    PARAM_DISK_THREADS="$1"
                fi
                shift
            ;;
            --help | -h)
                _help
                exit
            ;;
        esac

    done

}

# Display help if needed #
if [ $# -eq 0 ]; then
    _help
    exit
fi

# Argument and parameters #
arguments $@

# Check execution consistency #
if [ -z "$PARAM_MOUNT" ] || [ -z "$PARAM_MAC" ] || [ -z "$PARAM_MASTER" ]; then

    # Exit script #
    echo "Error : cannot continue execution without --mount-point/--mac-address/--master-timestamp parameters"
    exit 1

fi

# Check execution consistency #
if [ ! -d $PARAM_MOUNT/camera ]; then

    # Exit script #
    echo "Error : unable to access standard directory with specified mount point"
    exit 1

fi

# SSH configs cirectory
SSH_CONFIGS_DIR="$PARAM_MOUNT/ssh-configs/rawdata-procedures"

# SSH config file
SSH_CONFIG_FILE="$SSH_CONFIGS_DIR/rawdata-jp4preview.conf"

# Segments base folder
SEGMENTS_DIR="$PARAM_MOUNT/camera/$PARAM_MAC/raw/$PARAM_MASTER/segment"

# Preview script
PREVIEW_SCRIPT="scripts/rawdata-jp4preview-generator"

#Movie generator script
MOVIE_SCRIPT="scripts/rawdata-jp4preview-moviegenerator"

# JSON updater script
JSONUPDATE_SCRIPT="scripts/rawdata-jp4preview-jsonupdater"

# State script
STATE_SCRIPT="scripts/rawdata-jp4preview-state"

# Check if a segment is specified
if [ -z "$PARAM_SEGMENT" ]; then

    # Iterate over segments
    for d in $SEGMENTS_DIR/* ; do

        # Determine segment folder
        SEGMENT_TIMESTAMP=$(basename $d)
        SEGMENT_FOLDER=$SEGMENTS_DIR/$SEGMENT_TIMESTAMP

        # Check if segment is already splitted
        python $STATE_SCRIPT $PARAM_MOUNT \
        $PARAM_MAC \
        $PARAM_MASTER \
        $SEGMENT_TIMESTAMP \
        $PARAM_NO_DEBAYER

        if [ $? -eq 1 ]; then
            echo "Previews already generated for segment $SEGMENT_TIMESTAMP, skipping"
        else

            # Generate previews for segment
            echo "Generating previews for segment $SEGMENT_TIMESTAMP..."

            if [ -z "$PARAM_DISK_THREADS" ]; then
                find $SEGMENT_FOLDER/jp4 -type f -iname "*_1.jp4" | sort | parallel --eta --ungroup --sshloginfile $SSH_CONFIG_FILE --bf $PREVIEW_SCRIPT $PREVIEW_SCRIPT {} \
                $PARAM_MOUNT \
                $PARAM_MASTER \
                $PARAM_MAC \
                $SEGMENT_TIMESTAMP \
                $PARAM_NO_DEBAYER
            else
                find $SEGMENT_FOLDER/jp4 -type f -iname "*_1.jp4" | sort | parallel -j$PARAM_DISK_THREADS --eta $PREVIEW_SCRIPT {} \
                $PARAM_MOUNT \
                $PARAM_MASTER \
                $PARAM_MAC \
                $SEGMENT_TIMESTAMP \
                $PARAM_NO_DEBAYER
            fi

            # Generate preview movie
            echo "Generating preview movie..."
            python $MOVIE_SCRIPT $PARAM_MOUNT \
            $PARAM_MAC \
            $PARAM_MASTER \
            $SEGMENT_TIMESTAMP \
            $PARAM_NO_DEBAYER

            # Update JSON file
            echo "Updating segment JSON file..."
            python $JSONUPDATE_SCRIPT $PARAM_MOUNT \
            $PARAM_MAC \
            $PARAM_MASTER \
            $SEGMENT_TIMESTAMP \
            $PARAM_NO_DEBAYER
        fi
    done

else

    # Determine segment folder
    SEGMENT_FOLDER=$SEGMENTS_DIR/$PARAM_SEGMENT

    # Check if previews has been already generated for segment
    python $STATE_SCRIPT $PARAM_MOUNT \
    $PARAM_MAC \
    $PARAM_MASTER \
    $PARAM_SEGMENT \
    $PARAM_NO_DEBAYER

    if [ $? -eq 1 ]; then
        echo "Previews already generated for segment $PARAM_SEGMENT, skipping"
    else

        # Generate previews for segment
        echo "Generating previews for segment $PARAM_SEGMENT..."

        if [ -z "$PARAM_DISK_THREADS" ]; then
            find $SEGMENT_FOLDER/jp4 -type f -iname "*_1.jp4" | sort | parallel --eta --ungroup --sshloginfile $SSH_CONFIG_FILE --bf $PREVIEW_SCRIPT $PREVIEW_SCRIPT {} \
            $PARAM_MOUNT \
            $PARAM_MASTER \
            $PARAM_MAC \
            $PARAM_SEGMENT \
            $PARAM_NO_DEBAYER
        else
            find $SEGMENT_FOLDER/jp4 -type f -iname "*_1.jp4" | sort | parallel -j$PARAM_DISK_THREADS --eta $PREVIEW_SCRIPT {} \
            $PARAM_MOUNT \
            $PARAM_MASTER \
            $PARAM_MAC \
            $PARAM_SEGMENT \
            $PARAM_NO_DEBAYER
        fi

        # Generate preview movie
        echo "Generating preview movie..."
        python $MOVIE_SCRIPT $PARAM_MOUNT \
        $PARAM_MAC \
        $PARAM_MASTER \
        $PARAM_SEGMENT \
        $PARAM_NO_DEBAYER

        # Update JSON file
        echo "Updating segment JSON file..."
        python $JSONUPDATE_SCRIPT $PARAM_MOUNT \
        $PARAM_MAC \
        $PARAM_MASTER \
        $PARAM_SEGMENT \
        $PARAM_NO_DEBAYER
    fi

fi
